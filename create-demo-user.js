const sqlite3 = require('sqlite3').verbose();
const bcrypt = require('bcryptjs');
const path = require('path');

const dbPath = path.join(__dirname, 'data/vetformulab.db');

const createDemoUser = async () => {
  const db = new sqlite3.Database(dbPath);
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    const user = await new Promise((resolve, reject) => {
      db.get('SELECT id FROM users WHERE email = ?', ['demo@clinic.com'], (err, row) => {
        if (err) reject(err);
        else resolve(row);
      });
    });

    if (user) {
      console.log('üë§ –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      db.close();
      return;
    }

    // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è
    const passwordHash = await bcrypt.hash('demo123', 10);

    // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await new Promise((resolve, reject) => {
      const insertQuery = `
        INSERT INTO users (email, password_hash, clinic_name, clinic_phone, clinic_address, contact_person, is_active)
        VALUES (?, ?, ?, ?, ?, ?, 1)
      `;

      db.run(insertQuery, [
        'demo@clinic.com',
        passwordHash,
        '–î–µ–º–æ –í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞',
        '+7 (999) 123-45-67',
        '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è, –¥. 1',
        '–î–µ–º–æ –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä'
      ], function(err) {
        if (err) reject(err);
        else resolve(this.lastID);
      });
    });

    console.log('‚úÖ –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìß Email: demo@clinic.com');
    console.log('üîë –ü–∞—Ä–æ–ª—å: demo123');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  } finally {
    db.close();
  }
};

createDemoUser(); 