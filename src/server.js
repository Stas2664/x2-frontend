const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');

const { initDatabase } = require('./database');
const animalsRouter = require('./routes/animals');
const feedsRouter = require('./routes/feeds');
const calculationsRouter = require('./routes/calculations');
const { router: authRouter } = require('./routes/auth');

const app = express();

// ======== CORS CONFIGURATION ========
const allowedOrigins = [
  "http://localhost:3000",
  "https://x2-frontend-gmwx.vercel.app"
];

const corsOptions = {
  origin: function (origin, callback) {
    if (!origin || allowedOrigins.includes(origin)) {
      callback(null, true);
    } else {
      callback(new Error("Not allowed by CORS"));
    }
  },
  credentials: true
};

app.use(cors(corsOptions));
// ====================================


// ======== CORS CONFIGURATION ========





// ====================================


// ======== CORS CONFIGURATION ========





// ====================================

const PORT = process.env.PORT || 3001;

// CORS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞


// Middleware

app.use(bodyParser.json({ limit: '50mb' }));
app.use(bodyParser.urlencoded({ extended: true, limit: '50mb' }));

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} - ${req.method} ${req.path}`);
  next();
});

// Health check - —É–ª—É—á—à–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'OK', 
    message: 'VetFormuLab Backend API —Ä–∞–±–æ—Ç–∞–µ—Ç!',
    env: process.env.NODE_ENV || 'development',
    timestamp: new Date().toISOString(),
    port: PORT,
    cors: 'enabled'
  });
});

// Routes
app.use('/api/auth', authRouter);
app.use('/api/animals', animalsRouter);
app.use('/api/feeds', feedsRouter);
app.use('/api/calculations', calculationsRouter);

// API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
app.get('/', (req, res) => {
  res.json({ 
    message: 'VetFormuLab API Server —Ä–∞–±–æ—Ç–∞–µ—Ç!', 
    status: 'running',
    version: '1.0.0',
    port: PORT,
    environment: process.env.NODE_ENV || 'development',
    endpoints: {
      health: '/api/health',
      auth: '/api/auth',
      animals: '/api/animals',
      feeds: '/api/feeds',
      calculations: '/api/calculations'
    },
    cors: {
      enabled: true,
      origins: corsOptions.origin
    },
    documentation: 'API –¥–ª—è VetFormuLab - –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã —Ä–∞—Å—á–µ—Ç–∞ –ø–∏—Ç–∞–Ω–∏—è –∂–∏–≤–æ—Ç–Ω—ã—Ö'
  });
});

// 404 –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤
app.get('*', (req, res) => {
  if (req.path.startsWith('/api/')) {
    res.status(404).json({ 
      error: 'API endpoint not found', 
      available_endpoints: ['/api/health', '/api/auth', '/api/animals', '/api/feeds', '/api/calculations']
    });
  } else {
    res.status(404).json({ 
      error: 'Not Found', 
      message: '–≠—Ç–æ API —Å–µ—Ä–≤–µ—Ä. –§—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ–º –¥–æ–º–µ–Ω–µ.',
      api_url: `${req.protocol}://${req.get('host')}/api/health`
    });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
app.use((err, req, res, next) => {
  console.error('–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', err);
  res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
console.log('üîÑ –ó–∞–ø—É—Å–∫ VetFormuLab Backend —Å–µ—Ä–≤–µ—Ä–∞...');
console.log('üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è:', process.cwd());
console.log('üîß Node.js –≤–µ—Ä—Å–∏—è:', process.version);

initDatabase().then(() => {
  app.listen(PORT, '0.0.0.0', () => {
    console.log('=====================================');
    console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    console.log(`üìñ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:${PORT}/api/health`);
    console.log(`üåê –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`);
    console.log(`‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è: ${allowedOrigins.join(', ')}`);
    console.log('=====================================');
  });
}).catch(err => {
  console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', err);
  console.error('–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏:', err.message);
  process.exit(1);
}); 