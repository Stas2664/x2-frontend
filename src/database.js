const sqlite3 = require('sqlite3').verbose();
const path = require('path');
const fs = require('fs');

// –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –ø—É—Ç–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const dbPath = process.env.SQLITE_DATABASE_PATH || path.join(__dirname, '../data/vetformulab.db');
let db = null;

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
const dbDir = path.dirname(dbPath);
if (!fs.existsSync(dbDir)) {
  fs.mkdirSync(dbDir, { recursive: true });
  console.log(`üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: ${dbDir}`);
}

const connectDatabase = () => {
  return new Promise((resolve, reject) => {
    console.log(`üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: ${dbPath}`);
    db = new sqlite3.Database(dbPath, (err) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SQLite:', err);
        reject(err);
      } else {
        console.log(`‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ SQLite –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${dbPath}`);
        resolve();
      }
    });
  });
};

const createTables = () => {
  return new Promise((resolve, reject) => {
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–µ—Ä–≤—ã–µ)
    const queries = [
      // –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤–µ—Ç–∫–ª–∏–Ω–∏–∫–∏)
      `CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        email TEXT UNIQUE NOT NULL,
        password_hash TEXT NOT NULL,
        clinic_name TEXT NOT NULL,
        clinic_phone TEXT,
        clinic_address TEXT,
        contact_person TEXT,
        is_active INTEGER DEFAULT 1,
        subscription_type TEXT DEFAULT 'basic',
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )`,
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –∂–∏–≤–æ—Ç–Ω—ã—Ö —Å user_id
      `CREATE TABLE IF NOT EXISTS animals (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        name TEXT NOT NULL,
        species TEXT NOT NULL CHECK (species IN ('dog', 'cat', 'ferret')),
        weight REAL NOT NULL,
        age INTEGER NOT NULL,
        gender TEXT NOT NULL CHECK (gender IN ('male', 'female')),
        breed TEXT,
        is_neutered BOOLEAN DEFAULT 0,
        activity_level TEXT NOT NULL CHECK (activity_level IN ('low', 'moderate', 'high', 'very_high')),
        physiological_state TEXT DEFAULT 'normal' CHECK (physiological_state IN ('normal', 'pregnant', 'lactating', 'growing', 'senior', 'overweight', 'underweight')),
        metabolic_energy_need REAL,
        owner_name TEXT,
        owner_phone TEXT,
        medical_notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE
      )`,
      
      // –¢–∞–±–ª–∏—Ü–∞ –∫–æ—Ä–º–æ–≤ (–º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—â–µ–π –∏–ª–∏ –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–æ–π –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é)
      `CREATE TABLE IF NOT EXISTS feeds (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NULL,
        name TEXT NOT NULL,
        brand TEXT NOT NULL,
        type TEXT NOT NULL CHECK (type IN ('dry', 'wet', 'raw', 'treats')),
        animal_type TEXT NOT NULL CHECK (animal_type IN ('dog', 'cat', 'both')),
        category TEXT NOT NULL CHECK (category IN ('kitten', 'puppy_small', 'puppy_medium', 'puppy_large', 'adult', 'senior', 'weight_loss', 'diet', 'special')),
        metabolic_energy REAL NOT NULL,
        protein REAL,
        fat REAL,
        carbohydrates REAL,
        fiber REAL,
        ash REAL,
        moisture REAL,
        calcium INTEGER,
        phosphorus INTEGER,
        sodium INTEGER,
        potassium INTEGER,
        magnesium INTEGER,
        iron INTEGER,
        zinc INTEGER,
        copper INTEGER,
        manganese INTEGER,
        selenium REAL,
        iodine INTEGER,
        vitamin_a INTEGER,
        vitamin_d INTEGER,
        vitamin_e INTEGER,
        vitamin_k INTEGER,
        vitamin_b1 REAL,
        vitamin_b2 REAL,
        vitamin_b3 REAL,
        vitamin_b5 REAL,
        vitamin_b6 REAL,
        vitamin_b7 REAL,
        vitamin_b9 REAL,
        vitamin_b12 REAL,
        vitamin_c INTEGER,
        ingredients TEXT,
        notes TEXT,
        price_per_kg REAL,
        is_available BOOLEAN DEFAULT 1,
        is_public BOOLEAN DEFAULT 0,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE SET NULL
      )`,
      
      // –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏–π —Å user_id
      `CREATE TABLE IF NOT EXISTS comparisons (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER NOT NULL,
        animal_id INTEGER NOT NULL,
        feed_ids TEXT NOT NULL,
        comparison_data TEXT NOT NULL,
        notes TEXT,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE,
        FOREIGN KEY (animal_id) REFERENCES animals (id) ON DELETE CASCADE
      )`
    ];

    let completed = 0;
    let hasError = false;

    queries.forEach((query, index) => {
      db.run(query, (err) => {
        if (err && !hasError) {
          console.error(`–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã ${index + 1}:`, err);
          hasError = true;
          reject(err);
          return;
        }
        
        completed++;
        if (completed === queries.length && !hasError) {
          console.log('‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ');
          resolve();
        }
      });
    });
  });
};

const insertSampleData = () => {
  return new Promise((resolve, reject) => {
    console.log('üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ—Ä–º–æ–≤ –∏–∑ JSON...');
    
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—É–±–ª–∏—á–Ω—ã–µ –∫–æ—Ä–º–∞
    db.run('DELETE FROM feeds WHERE user_id IS NULL', (err) => {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –∫–æ—Ä–º–æ–≤:', err);
        reject(err);
        return;
      }
      
      console.log('üóëÔ∏è –°—Ç–∞—Ä—ã–µ –∫–æ—Ä–º–∞ —É–¥–∞–ª–µ–Ω—ã');
      
      // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
      let feedsData;
      try {
        const jsonPath = path.join(__dirname, '../data/feeds_database.json');
        const jsonContent = fs.readFileSync(jsonPath, 'utf8');
        feedsData = JSON.parse(jsonContent);
        console.log(`üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${feedsData.feeds.length} –∫–æ—Ä–º–æ–≤ –∏–∑ JSON`);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è JSON —Ñ–∞–π–ª–∞:', error);
        reject(error);
        return;
      }

      // –§—É–Ω–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏
      const normalizeAnimalType = (type) => {
        const map = { '—Å–æ–±–∞–∫–∞': 'dog', '–∫–æ—à–∫–∞': 'cat' };
        return map[type] || type;
      };

      const normalizeLifeStage = (stage) => {
        const map = { 
          '–≤–∑—Ä–æ—Å–ª—ã–π': 'adult', 
          '—â–µ–Ω–æ–∫': 'puppy_medium', 
          '–∫–æ—Ç–µ–Ω–æ–∫': 'kitten',
          '–ø–æ–∂–∏–ª–æ–π': 'senior'
        };
        return map[stage] || 'adult';
      };

      const normalizeFeedType = (type) => {
        const map = { 
          '–ª–µ—á–µ–±–Ω—ã–π': 'diet',
          '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π': 'adult'
        };
        return map[type] || 'adult';
      };

      // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏
      const sampleFeeds = feedsData.feeds.map(feed => ({
        name: feed.name,
        brand: feed.brand,
        type: 'dry',
        animal_type: normalizeAnimalType(feed.animal_type),
        category: feed.type === '–ª–µ—á–µ–±–Ω—ã–π' ? 'diet' : normalizeLifeStage(feed.life_stage),
        metabolic_energy: Math.round(feed.energy.metabolizable_energy / 10), // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –∫–∫–∞–ª/100–≥
        protein: feed.composition.crude_protein,
        fat: feed.composition.crude_fat,
        carbohydrates: feed.composition.nfe,
        fiber: feed.composition.crude_fiber,
        ash: feed.composition.ash,
        moisture: feed.composition.moisture,
        calcium: Math.round((feed.composition.calcium || 0) * 1000), // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–≥
        phosphorus: Math.round((feed.composition.phosphorus || 0) * 1000), // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–≥
        sodium: Math.round((feed.composition.sodium || 0) * 1000), // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–≥
        potassium: Math.round((feed.composition.potassium || 0) * 1000), // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–≥
        magnesium: Math.round((feed.composition.magnesium || 0) * 1000), // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–≥
        iron: Math.round(feed.composition.iron || 0),
        zinc: Math.round(feed.composition.zinc || 0),
        copper: Math.round(feed.composition.copper || 0),
        manganese: Math.round(feed.composition.manganese || 0),
        selenium: feed.composition.selenium || 0,
        iodine: Math.round(feed.composition.iodine || 0),
        vitamin_a: Math.round(feed.vitamins.vitamin_a || 0),
        vitamin_d: Math.round(feed.vitamins.vitamin_d3 || 0),
        vitamin_e: Math.round(feed.vitamins.vitamin_e || 0),
        vitamin_k: feed.vitamins.vitamin_k || 0,
        vitamin_b1: feed.vitamins.vitamin_b1 || 0,
        vitamin_b2: feed.vitamins.vitamin_b2 || 0,
        vitamin_b6: feed.vitamins.vitamin_b6 || 0,
        vitamin_b12: feed.vitamins.vitamin_b12 || 0,
        ingredients: feed.ingredients || '–°–æ—Å—Ç–∞–≤ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è',
        price_per_kg: 1000, // –ü—Ä–∏–º–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞
        is_public: 1
      }));

      // –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ—Ä–º–∞ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —Ä–∞–∑–º–µ—Ä–æ–º –∑–∞–ø—Ä–æ—Å–∞
      let insertedCount = 0;
      const batchSize = 10;
      
      const insertBatch = (startIndex) => {
        if (startIndex >= sampleFeeds.length) {
          console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ ${insertedCount} –∫–æ—Ä–º–æ–≤!`);
          console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
          
          const dogFeeds = sampleFeeds.filter(f => f.animal_type === 'dog').length;
          const catFeeds = sampleFeeds.filter(f => f.animal_type === 'cat').length;
          const brands = [...new Set(sampleFeeds.map(f => f.brand))].length;
          
          console.log(`üêï –î–ª—è —Å–æ–±–∞–∫: ${dogFeeds}`);
          console.log(`üê± –î–ª—è –∫–æ—à–µ–∫: ${catFeeds}`);
          console.log(`üè∑Ô∏è –ë—Ä–µ–Ω–¥–æ–≤: ${brands}`);
          console.log(`üì¶ –í—Å–µ–≥–æ –∫–æ—Ä–º–æ–≤: ${sampleFeeds.length}`);
          
          resolve();
          return;
        }
        
        const batch = sampleFeeds.slice(startIndex, startIndex + batchSize);
        const placeholders = batch.map(() => 
          '(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)'
        ).join(', ');

        const values = batch.flatMap(feed => [
          null, // user_id (NULL –¥–ª—è –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–æ—Ä–º–æ–≤)
          feed.name, feed.brand, feed.type, feed.animal_type, feed.category,
          feed.metabolic_energy, feed.protein, feed.fat, feed.carbohydrates,
          feed.fiber, feed.ash, feed.moisture, feed.calcium, feed.phosphorus,
          feed.sodium, feed.potassium, feed.magnesium, feed.iron, feed.zinc, 
          feed.copper, feed.manganese, feed.selenium, feed.iodine,
          feed.vitamin_a, feed.vitamin_d, feed.vitamin_e, feed.vitamin_k,
          feed.vitamin_b1, feed.vitamin_b2, 
          0, // vitamin_b3 (niacin) - –ø–æ–∫–∞ 0, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ JSON –ø–æ–∑–∂–µ
          0, // vitamin_b5 (pantothenic acid) - –ø–æ–∫–∞ 0
          feed.vitamin_b6, 
          0, // vitamin_b7 (biotin) - –ø–æ–∫–∞ 0
          0, // vitamin_b9 (folic acid) - –ø–æ–∫–∞ 0
          feed.vitamin_b12,
          0, // vitamin_c - –ø–æ–∫–∞ 0
          feed.ingredients || '–°–æ—Å—Ç–∞–≤ —É—Ç–æ—á–Ω—è–µ—Ç—Å—è', // ingredients - –ø–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –∫–æ—Ä–º–∞
          '', // notes - –ø–æ–∫–∞ –ø—É—Å—Ç–æ–µ
          feed.price_per_kg, 
          1, // is_available = 1 (true)
          1, // is_public = 1 (true)
          new Date().toISOString(), // created_at
          new Date().toISOString()  // updated_at
        ]);

        const insertQuery = `
          INSERT INTO feeds (
            user_id, name, brand, type, animal_type, category, metabolic_energy, protein, fat, carbohydrates,
            fiber, ash, moisture, calcium, phosphorus, sodium, potassium, magnesium, iron, zinc, 
            copper, manganese, selenium, iodine, vitamin_a, vitamin_d, vitamin_e, vitamin_k,
            vitamin_b1, vitamin_b2, vitamin_b3, vitamin_b5, vitamin_b6, vitamin_b7, vitamin_b9, vitamin_b12, vitamin_c,
            ingredients, notes, price_per_kg, is_available, is_public, created_at, updated_at
          ) VALUES ${placeholders}
        `;

        db.run(insertQuery, values, function(err) {
          if (err) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –ø–∞–∫–µ—Ç–∞ ${startIndex}-${startIndex + batch.length}:`, err);
            reject(err);
            return;
          }
          
          insertedCount += batch.length;
          console.log(`üì• –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${insertedCount}/${sampleFeeds.length} –∫–æ—Ä–º–æ–≤...`);
          
          // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –ø–∞–∫–µ—Ç—É
          insertBatch(startIndex + batchSize);
        });
      };
      
      // –ù–∞—á–∏–Ω–∞–µ–º –≤—Å—Ç–∞–≤–∫—É —Å –ø–µ—Ä–≤–æ–≥–æ –ø–∞–∫–µ—Ç–∞
      insertBatch(0);
    });
  });
};

const createDemoUser = () => {
  return new Promise((resolve, reject) => {
    const bcrypt = require('bcryptjs');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    db.get('SELECT id FROM users WHERE email = ?', ['demo@clinic.com'], async (err, user) => {
      if (err) {
        reject(err);
        return;
      }

      if (user) {
        console.log('üë§ –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
        resolve();
        return;
      }

      try {
        // –°–æ–∑–¥–∞–µ–º —Ö–µ—à –ø–∞—Ä–æ–ª—è –¥–ª—è –¥–µ–º–æ-–∞–∫–∫–∞—É–Ω—Ç–∞
        const passwordHash = await bcrypt.hash('demo123', 10);

        // –í—Å—Ç–∞–≤–ª—è–µ–º –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const insertQuery = `
          INSERT INTO users (email, password_hash, clinic_name, clinic_phone, clinic_address, contact_person, is_active)
          VALUES (?, ?, ?, ?, ?, ?, 1)
        `;

        db.run(insertQuery, [
          'demo@clinic.com',
          passwordHash,
          '–î–µ–º–æ –í–µ—Ç–∫–ª–∏–Ω–∏–∫–∞',
          '+7 (999) 123-45-67',
          '–≥. –ú–æ—Å–∫–≤–∞, —É–ª. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω–∞—è, –¥. 1',
          '–î–µ–º–æ –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä'
        ], function(err) {
          if (err) {
            console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
            reject(err);
          } else {
            console.log('üë§ –î–µ–º–æ-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ (demo@clinic.com / demo123)');
            resolve();
          }
        });
      } catch (error) {
        reject(error);
      }
    });
  });
};

const initDatabase = async () => {
  try {
    await connectDatabase();
    await createTables();
    await createDemoUser();
    await insertSampleData();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
  }
};

const getDatabase = () => {
  if (!db) {
    throw new Error('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞');
  }
  return db;
};

module.exports = {
  initDatabase,
  getDatabase
}; 