const fs = require('fs');
const path = require('path');
const { google } = require('googleapis');
const sqlite3 = require('sqlite3').verbose();

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Google Sheets
const SPREADSHEET_ID = '1z_3fgHP9HAupBA9uGW3-_KDVdoWC2WkvBRuexCnVzMA';
const RANGE = '–õ–∏—Å—Ç1!A2:AX1000'; // –î–∏–∞–ø–∞–∑–æ–Ω –¥–∞–Ω–Ω—ã—Ö (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏)

// –§—É–Ω–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
const normalizeAnimalType = (type) => {
  const map = {
    '–°–æ–±–∞–∫–∞': 'dog',
    '–ö–æ—à–∫–∞': 'cat',
    '—Å–æ–±–∞–∫–∞': 'dog',
    '–∫–æ—à–∫–∞': 'cat'
  };
  return map[type] || 'dog';
};

const normalizeFeedType = (type) => {
  const map = {
    '–¢–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–π': 'diet',
    '–ü–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π': 'adult',
    '–ª–µ—á–µ–±–Ω—ã–π': 'diet',
    '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π': 'adult'
  };
  return map[type] || 'adult';
};

const normalizeLifeStage = (stage) => {
  const stageStr = stage.toLowerCase();
  if (stageStr.includes('—â–µ–Ω–æ–∫') || stageStr.includes('puppy')) return 'puppy_medium';
  if (stageStr.includes('–∫–æ—Ç–µ–Ω–æ–∫') || stageStr.includes('kitten')) return 'kitten';
  if (stageStr.includes('–ø–æ–∂–∏–ª–æ–π') || stageStr.includes('senior')) return 'senior';
  if (stageStr.includes('–≤–∑—Ä–æ—Å–ª—ã–π') || stageStr.includes('adult')) return 'adult';
  return 'adult';
};

const parseNumber = (value) => {
  if (!value || value === '' || value === '-') return null;
  const numStr = String(value).replace(',', '.');
  const num = parseFloat(numStr);
  return isNaN(num) ? null : num;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
async function fetchGoogleSheetsData() {
  try {
    console.log('üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...');
    
    // –°–æ–∑–¥–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ Google Sheets API
    const sheets = google.sheets({ version: 'v4' });
    
    const response = await sheets.spreadsheets.values.get({
      spreadsheetId: SPREADSHEET_ID,
      range: RANGE,
      key: process.env.GOOGLE_API_KEY // –ï—Å–ª–∏ –Ω—É–∂–µ–Ω API –∫–ª—é—á
    });

    const rows = response.data.values;
    console.log(`üìä –ü–æ–ª—É—á–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ –¥–∞–Ω–Ω—ã—Ö`);
    
    return rows;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error.message);
    throw error;
  }
}

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± - —ç–∫—Å–ø–æ—Ä—Ç –≤ CSV –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∞
async function processGoogleSheetsCSV() {
  try {
    console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...');
    
    // URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Google Sheets –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ
    const csvUrl = `https://docs.google.com/spreadsheets/d/${SPREADSHEET_ID}/export?format=csv&gid=0`;
    
    console.log('üì• –°–∫–∞—á–∏–≤–∞–µ–º CSV —Ñ–∞–π–ª...');
    console.log('URL:', csvUrl);
    
    // –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fetch –∏–ª–∏ –¥—Ä—É–≥–æ–π HTTP –∫–ª–∏–µ–Ω—Ç
    const fetch = require('node-fetch');
    const response = await fetch(csvUrl);
    const csvData = await response.text();
    
    console.log('‚úÖ CSV –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã');
    
    // –ü–∞—Ä—Å–∏–º CSV –¥–∞–Ω–Ω—ã–µ
    const rows = csvData.split('\n').map(row => row.split(','));
    
    // –£–¥–∞–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    rows.shift();
    
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${rows.length} –∫–æ—Ä–º–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞`);
    
    return rows;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ CSV:', error.message);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –Ω—É–∂–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
function transformRowToFeed(row, index) {
  // –ú–∞–ø–∏–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–µ —Ç–∞–±–ª–∏—Ü—ã
  // A=0: –Ω–æ–º–µ—Ä, B=1: –∂–∏–≤–æ—Ç–Ω–æ–µ, C=2: —Ç–∏–ø, D=3: –≤–æ–∑—Ä–∞—Å—Ç, E=4: —Ñ–æ—Ä–º–∞, F=5: –±—Ä–µ–Ω–¥, G=6: –Ω–∞–∑–≤–∞–Ω–∏–µ, H=7: ME, –∏ —Ç.–¥.
  
  const feed = {
    id: index + 1,
    name: row[6] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ—Ä–º', // –ö–æ–ª–æ–Ω–∫–∞ G - –Ω–∞–∑–≤–∞–Ω–∏–µ
    brand: row[5] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥', // –ö–æ–ª–æ–Ω–∫–∞ F - –±—Ä–µ–Ω–¥
    type: normalizeFeedType(row[2] || '–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π'), // –ö–æ–ª–æ–Ω–∫–∞ C - —Ç–∏–ø
    animal_type: normalizeAnimalType(row[1] || '—Å–æ–±–∞–∫–∞'), // –ö–æ–ª–æ–Ω–∫–∞ B - –∂–∏–≤–æ—Ç–Ω–æ–µ
    life_stage: normalizeLifeStage(row[3] || '–≤–∑—Ä–æ—Å–ª—ã–π'), // –ö–æ–ª–æ–Ω–∫–∞ D - –≤–æ–∑—Ä–∞—Å—Ç
    composition: {
      crude_protein: parseNumber(row[9]) || 25.0, // –ö–æ–ª–æ–Ω–∫–∞ J - –±–µ–ª–æ–∫
      crude_fat: parseNumber(row[10]) || 12.0, // –ö–æ–ª–æ–Ω–∫–∞ K - –∂–∏—Ä
      crude_fiber: parseNumber(row[12]) || 2.5, // –ö–æ–ª–æ–Ω–∫–∞ M - –∫–ª–µ—Ç—á–∞—Ç–∫–∞
      ash: parseNumber(row[13]) || 7.0, // –ö–æ–ª–æ–Ω–∫–∞ N - –∑–æ–ª–∞
      moisture: parseNumber(row[8]) || 8.0, // –ö–æ–ª–æ–Ω–∫–∞ I - –≤–ª–∞–≥–∞
      nfe: parseNumber(row[11]) || 45.0, // –ö–æ–ª–æ–Ω–∫–∞ L - –ë–≠–í
      calcium: parseNumber(row[14]) || 1.0, // –ö–æ–ª–æ–Ω–∫–∞ O - –∫–∞–ª—å—Ü–∏–π
      phosphorus: parseNumber(row[15]) || 0.8, // –ö–æ–ª–æ–Ω–∫–∞ P - —Ñ–æ—Å—Ñ–æ—Ä
      sodium: parseNumber(row[16]) || 0.4, // –ö–æ–ª–æ–Ω–∫–∞ Q - –Ω–∞—Ç—Ä–∏–π
      potassium: parseNumber(row[17]) || 0.7, // –ö–æ–ª–æ–Ω–∫–∞ R - –∫–∞–ª–∏–π
      magnesium: parseNumber(row[18]) || 0.08, // –ö–æ–ª–æ–Ω–∫–∞ S - –º–∞–≥–Ω–∏–π
      iron: parseNumber(row[19]) || 150.0, // –ö–æ–ª–æ–Ω–∫–∞ T - –∂–µ–ª–µ–∑–æ
      copper: parseNumber(row[21]) || 15.0, // –ö–æ–ª–æ–Ω–∫–∞ V - –º–µ–¥—å
      zinc: parseNumber(row[20]) || 180.0, // –ö–æ–ª–æ–Ω–∫–∞ U - —Ü–∏–Ω–∫
      manganese: parseNumber(row[22]) || 50.0, // –ö–æ–ª–æ–Ω–∫–∞ W - –º–∞—Ä–≥–∞–Ω–µ—Ü
      iodine: parseNumber(row[23]) || 2.5, // –ö–æ–ª–æ–Ω–∫–∞ X - –π–æ–¥
      selenium: parseNumber(row[24]) || 0.3 // –ö–æ–ª–æ–Ω–∫–∞ Y - —Å–µ–ª–µ–Ω
    },
    vitamins: {
      vitamin_a: parseNumber(row[25]) || 20000, // –ö–æ–ª–æ–Ω–∫–∞ Z - –≤–∏—Ç–∞–º–∏–Ω A
      vitamin_d3: parseNumber(row[26]) || 1000, // –ö–æ–ª–æ–Ω–∫–∞ AA - –≤–∏—Ç–∞–º–∏–Ω D3
      vitamin_e: parseNumber(row[27]) || 500, // –ö–æ–ª–æ–Ω–∫–∞ AB - –≤–∏—Ç–∞–º–∏–Ω E
      vitamin_k: parseNumber(row[28]) || 0.8, // –ö–æ–ª–æ–Ω–∫–∞ AC - –≤–∏—Ç–∞–º–∏–Ω K
      vitamin_b1: parseNumber(row[29]) || 25.0, // –ö–æ–ª–æ–Ω–∫–∞ AD - –≤–∏—Ç–∞–º–∏–Ω B1
      vitamin_b2: parseNumber(row[30]) || 20.0, // –ö–æ–ª–æ–Ω–∫–∞ AE - –≤–∏—Ç–∞–º–∏–Ω B2
      vitamin_b6: parseNumber(row[31]) || 15.0, // –ö–æ–ª–æ–Ω–∫–∞ AF - –≤–∏—Ç–∞–º–∏–Ω B6
      vitamin_b12: parseNumber(row[32]) || 0.1, // –ö–æ–ª–æ–Ω–∫–∞ AG - –≤–∏—Ç–∞–º–∏–Ω B12
      niacin: parseNumber(row[33]) || 400.0, // –ö–æ–ª–æ–Ω–∫–∞ AH - –Ω–∏–∞—Ü–∏–Ω
      pantothenic_acid: parseNumber(row[34]) || 120.0, // –ö–æ–ª–æ–Ω–∫–∞ AI - –ø–∞–Ω—Ç–æ—Ç–µ–Ω–æ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞
      folic_acid: parseNumber(row[35]) || 10.0, // –ö–æ–ª–æ–Ω–∫–∞ AJ - —Ñ–æ–ª–∏–µ–≤–∞—è –∫–∏—Å–ª–æ—Ç–∞
      biotin: parseNumber(row[36]) || 2.5, // –ö–æ–ª–æ–Ω–∫–∞ AK - –±–∏–æ—Ç–∏–Ω
      choline: parseNumber(row[37]) || 1500.0 // –ö–æ–ª–æ–Ω–∫–∞ AL - —Ö–æ–ª–∏–Ω
    },
    energy: {
      metabolizable_energy: parseNumber(row[7]) || 3700.0, // –ö–æ–ª–æ–Ω–∫–∞ H - ME
      digestible_energy: parseNumber(row[7]) ? parseNumber(row[7]) * 1.1 : 4000.0, // –ü—Ä–∏–º–µ—Ä–Ω–æ +10%
      gross_energy: parseNumber(row[7]) ? parseNumber(row[7]) * 1.2 : 4400.0 // –ü—Ä–∏–º–µ—Ä–Ω–æ +20%
    },
    feeding_guide: {
      weight_5kg: "70-90g",
      weight_10kg: "120-150g",
      weight_15kg: "165-205g",
      weight_20kg: "200-255g",
      weight_25kg: "235-295g"
    }
  };
  
  return feed;
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ JSON —Ñ–∞–π–ª
async function writeToJSON(feeds) {
  const outputData = {
    feeds: feeds,
    nutritional_requirements: {
      dogs: {
        adult: {
          protein_min: 18.0,
          fat_min: 5.5,
          fiber_max: 4.0,
          moisture_max: 12.0,
          calcium: "0.6-2.5",
          phosphorus: "0.5-1.6",
          sodium_max: 0.4,
          potassium_min: 0.6
        },
        puppy: {
          protein_min: 22.5,
          fat_min: 8.5,
          fiber_max: 4.0,
          moisture_max: 12.0,
          calcium: "1.0-2.5",
          phosphorus: "0.8-1.6"
        },
        senior: {
          protein_min: 18.0,
          fat_min: 5.5,
          fiber_max: 4.0,
          moisture_max: 12.0,
          calcium: "0.6-2.5",
          phosphorus: "0.5-1.6"
        }
      }
    },
    energy_calculations: {
      formulas: {
        rer: "70 * (weight_kg ^ 0.75)",
        mer_intact: "RER * 1.6",
        mer_neutered: "RER * 1.4",
        mer_weight_loss: "RER * 1.0",
        mer_senior: "RER * 1.4",
        mer_puppy_4mo: "RER * 3.0",
        mer_puppy_4_12mo: "RER * 2.0"
      },
      activity_multipliers: {
        –Ω–∏–∑–∫–∞—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 1.2,
        –Ω–æ—Ä–º–∞–ª—å–Ω–∞—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 1.4,
        –≤—ã—Å–æ–∫–∞—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 1.6,
        –æ—á–µ–Ω—å_–≤—ã—Å–æ–∫–∞—è_–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 1.8,
        –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å_—Ä–∞–Ω–Ω—è—è: 1.8,
        –±–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç—å_–ø–æ–∑–¥–Ω—è—è: 3.0,
        –ª–∞–∫—Ç–∞—Ü–∏—è: 4.0
      }
    }
  };

  const outputPath = path.join(__dirname, '../data/feeds_database_full.json');
  
  try {
    fs.writeFileSync(outputPath, JSON.stringify(outputData, null, 2), 'utf8');
    console.log(`‚úÖ –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∞–Ω—ã –≤ ${outputPath}`);
    console.log(`üìä –í—Å–µ–≥–æ –∫–æ—Ä–º–æ–≤: ${feeds.length}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞:', error.message);
    throw error;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∏–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets...\n');
    
    // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    let rows;
    
    try {
      rows = await processGoogleSheetsCSV();
    } catch (error) {
      console.log('‚ö†Ô∏è CSV –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –ø—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ API...');
      rows = await fetchGoogleSheetsData();
    }
    
    if (!rows || rows.length === 0) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã');
    }
    
    console.log(`\nüìã –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ${rows.length} —Å—Ç—Ä–æ–∫...`);
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç—ã –∫–æ—Ä–º–æ–≤
    const feeds = [];
    let processed = 0;
    
    for (let i = 0; i < rows.length; i++) {
      const row = rows[i];
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
      if (!row || row.length < 7 || !row[6]) {
        continue;
      }
      
      try {
        const feed = transformRowToFeed(row, feeds.length);
        feeds.push(feed);
        processed++;
        
        if (processed % 10 === 0) {
          console.log(`‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed} –∫–æ—Ä–º–æ–≤...`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i + 1}: ${error.message}`);
      }
    }
    
    console.log(`\n‚úÖ –£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${feeds.length} –∫–æ—Ä–º–æ–≤`);
    
    // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ JSON —Ñ–∞–π–ª
    await writeToJSON(feeds);
    
    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log('üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫: feeds_database_full.json');
    console.log(`üìä –í—Å–µ–≥–æ –∫–æ—Ä–º–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞: ${feeds.length}`);
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { main }; 