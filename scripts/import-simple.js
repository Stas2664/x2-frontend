const fs = require('fs');
const path = require('path');
const https = require('https');

console.log('üöÄ –ó–∞–ø—É—Å–∫ –∏–º–ø–æ—Ä—Ç–∞ –∫–æ—Ä–º–æ–≤ –∏–∑ Google Sheets...\n');

// –§—É–Ω–∫—Ü–∏–∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
const normalizeAnimalType = (type) => {
  if (!type) return 'dog';
  const typeStr = type.toLowerCase();
  if (typeStr.includes('—Å–æ–±–∞–∫–∞') || typeStr.includes('dog')) return 'dog';
  if (typeStr.includes('–∫–æ—à–∫–∞') || typeStr.includes('cat')) return 'cat';
  return 'dog';
};

const normalizeFeedType = (type) => {
  if (!type) return 'adult';
  const typeStr = type.toLowerCase();
  if (typeStr.includes('—Ç–µ—Ä–∞–ø–µ–≤—Ç–∏—á–µ—Å–∫–∏–π') || typeStr.includes('–ª–µ—á–µ–±–Ω—ã–π')) return 'diet';
  if (typeStr.includes('–ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–π') || typeStr.includes('adult')) return 'adult';
  return 'adult';
};

const normalizeLifeStage = (stage) => {
  if (!stage) return 'adult';
  const stageStr = stage.toLowerCase();
  if (stageStr.includes('—â–µ–Ω–æ–∫') || stageStr.includes('puppy')) return 'puppy_medium';
  if (stageStr.includes('–∫–æ—Ç–µ–Ω–æ–∫') || stageStr.includes('kitten')) return 'kitten';
  if (stageStr.includes('–ø–æ–∂–∏–ª–æ–π') || stageStr.includes('senior')) return 'senior';
  return 'adult';
};

const parseNumber = (value) => {
  if (!value || value === '' || value === '-') return null;
  const numStr = String(value).replace(',', '.');
  const num = parseFloat(numStr);
  return isNaN(num) ? null : num;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV –∏–∑ Google Sheets
function downloadCSV(url) {
  return new Promise((resolve, reject) => {
    console.log('üì• –°–∫–∞—á–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ Google Sheets...');
    
    https.get(url, (response) => {
      if (response.statusCode !== 200) {
        reject(new Error(`HTTP —Å—Ç–∞—Ç—É—Å: ${response.statusCode}`));
        return;
      }
      
      let data = '';
      response.setEncoding('utf8');
      
      response.on('data', (chunk) => {
        data += chunk;
      });
      
      response.on('end', () => {
        console.log('‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã');
        resolve(data);
      });
      
    }).on('error', (error) => {
      reject(error);
    });
  });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ CSV
function parseCSV(csvData) {
  console.log('üìã –ü–∞—Ä—Å–∏–º CSV –¥–∞–Ω–Ω—ã–µ...');
  
  const lines = csvData.split('\n');
  const rows = [];
  
  for (let i = 1; i < lines.length; i++) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
    const line = lines[i].trim();
    if (!line) continue;
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ CSV (–º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ—Ç–æ—á–Ω—ã–º –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤)
    const row = line.split(',').map(cell => cell.replace(/"/g, '').trim());
    
    if (row.length > 6 && row[6]) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –µ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ—Ä–º–∞
      rows.push(row);
    }
  }
  
  console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${rows.length} —Å—Ç—Ä–æ–∫ —Å –¥–∞–Ω–Ω—ã–º–∏`);
  return rows;
}

// –§—É–Ω–∫—Ü–∏—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏ –≤ –æ–±—ä–µ–∫—Ç –∫–æ—Ä–º–∞
function transformRowToFeed(row, index) {
  const feed = {
    id: index + 1,
    name: row[6] || `–ö–æ—Ä–º ${index + 1}`,
    brand: row[5] || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –±—Ä–µ–Ω–¥',
    type: normalizeFeedType(row[2]),
    animal_type: normalizeAnimalType(row[1]),
    life_stage: normalizeLifeStage(row[3]),
    composition: {
      crude_protein: parseNumber(row[9]) || 25.0,
      crude_fat: parseNumber(row[10]) || 12.0,
      crude_fiber: parseNumber(row[12]) || 2.5,
      ash: parseNumber(row[13]) || 7.0,
      moisture: parseNumber(row[8]) || 8.0,
      nfe: parseNumber(row[11]) || 45.0,
      calcium: parseNumber(row[14]) || 1.0,
      phosphorus: parseNumber(row[15]) || 0.8,
      sodium: parseNumber(row[16]) || 0.4,
      potassium: parseNumber(row[17]) || 0.7,
      magnesium: parseNumber(row[18]) || 0.08,
      iron: parseNumber(row[19]) || 150.0,
      copper: parseNumber(row[21]) || 15.0,
      zinc: parseNumber(row[20]) || 180.0,
      manganese: parseNumber(row[22]) || 50.0,
      iodine: parseNumber(row[23]) || 2.5,
      selenium: parseNumber(row[24]) || 0.3
    },
    vitamins: {
      vitamin_a: parseNumber(row[25]) || 20000,
      vitamin_d3: parseNumber(row[26]) || 1000,
      vitamin_e: parseNumber(row[27]) || 500,
      vitamin_k: parseNumber(row[28]) || 0.8,
      vitamin_b1: parseNumber(row[29]) || 25.0,
      vitamin_b2: parseNumber(row[30]) || 20.0,
      vitamin_b6: parseNumber(row[31]) || 15.0,
      vitamin_b12: parseNumber(row[32]) || 0.1,
      niacin: parseNumber(row[33]) || 400.0,
      pantothenic_acid: parseNumber(row[34]) || 120.0,
      folic_acid: parseNumber(row[35]) || 10.0,
      biotin: parseNumber(row[36]) || 2.5,
      choline: parseNumber(row[37]) || 1500.0
    },
    energy: {
      metabolizable_energy: parseNumber(row[7]) || 3700.0,
      digestible_energy: parseNumber(row[7]) ? parseNumber(row[7]) * 1.1 : 4000.0,
      gross_energy: parseNumber(row[7]) ? parseNumber(row[7]) * 1.2 : 4400.0
    },
    feeding_guide: {
      weight_5kg: "70-90g",
      weight_10kg: "120-150g",
      weight_15kg: "165-205g",
      weight_20kg: "200-255g",
      weight_25kg: "235-295g"
    }
  };
  
  return feed;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞
async function importFeeds() {
  try {
    // URL –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ Google Sheets –≤ CSV
    const csvUrl = 'https://docs.google.com/spreadsheets/d/1z_3fgHP9HAupBA9uGW3-_KDVdoWC2WkvBRuexCnVzMA/export?format=csv&gid=0';
    
    // –°–∫–∞—á–∏–≤–∞–µ–º CSV –¥–∞–Ω–Ω—ã–µ
    const csvData = await downloadCSV(csvUrl);
    
    // –ü–∞—Ä—Å–∏–º CSV
    const rows = parseCSV(csvData);
    
    if (rows.length === 0) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞');
    }
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ—Ä–º–∞
    console.log('üìñ –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ—Ä–º–∞...');
    let existingFeeds = [];
    const existingPath = path.join(__dirname, '../data/feeds_database.json');
    
    try {
      const existingData = fs.readFileSync(existingPath, 'utf8');
      const parsed = JSON.parse(existingData);
      existingFeeds = parsed.feeds || [];
      console.log(`üì¶ –ù–∞–π–¥–µ–Ω–æ ${existingFeeds.length} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ—Ä–º–æ–≤`);
    } catch (error) {
      console.log('‚ö†Ô∏è –§–∞–π–ª —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–æ—Ä–º–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π');
    }
    
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–æ–≤—ã–µ –∫–æ—Ä–º–∞
    console.log('üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ—Ä–º–∞...');
    const newFeeds = [];
    let processed = 0;
    
    for (let i = 0; i < rows.length && processed < 114; i++) {
      try {
        const feed = transformRowToFeed(rows[i], existingFeeds.length + processed);
        newFeeds.push(feed);
        processed++;
        
        if (processed % 20 === 0) {
          console.log(`‚è≥ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: ${processed} –∫–æ—Ä–º–æ–≤...`);
        }
      } catch (error) {
        console.log(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—Ç—Ä–æ–∫–∏ ${i + 1}: ${error.message}`);
      }
    }
    
    // –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ –∫–æ—Ä–º–∞
    const allFeeds = [...existingFeeds, ...newFeeds];
    
    console.log(`\n‚úÖ –í—Å–µ–≥–æ –∫–æ—Ä–º–æ–≤: ${allFeeds.length}`);
    console.log(`üìà –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö: ${newFeeds.length}`);
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
    const outputData = {
      feeds: allFeeds,
      nutritional_requirements: {
        dogs: {
          adult: { protein_min: 18.0, fat_min: 5.5, fiber_max: 4.0, moisture_max: 12.0 },
          puppy: { protein_min: 22.5, fat_min: 8.5, fiber_max: 4.0, moisture_max: 12.0 },
          senior: { protein_min: 18.0, fat_min: 5.5, fiber_max: 4.0, moisture_max: 12.0 }
        }
      },
      energy_calculations: {
        formulas: {
          rer: "70 * (weight_kg ^ 0.75)",
          mer_intact: "RER * 1.6",
          mer_neutered: "RER * 1.4"
        }
      }
    };
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const outputPath = path.join(__dirname, '../data/feeds_database.json');
    fs.writeFileSync(outputPath, JSON.stringify(outputData, null, 2), 'utf8');
    
    console.log('\nüéâ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
    console.log(`üìÅ –§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω: ${outputPath}`);
    console.log(`üìä –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ä–º–æ–≤: ${allFeeds.length}`);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–æ–≤
    console.log('\nüìã –ü—Ä–∏–º–µ—Ä—ã –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ—Ä–º–æ–≤:');
    newFeeds.slice(0, 3).forEach((feed, i) => {
      console.log(`${i + 1}. ${feed.name} (${feed.brand}) - ${feed.animal_type}/${feed.life_stage}`);
    });
    
    return allFeeds.length;
    
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:', error.message);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫
if (require.main === module) {
  importFeeds();
}

module.exports = { importFeeds }; 